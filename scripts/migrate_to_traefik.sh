#!/bin/bash
# Script de migration s√©curis√©e vers docker-compose.traefik.yml
# Ce script pr√©serve toutes les donn√©es en v√©rifiant les volumes avant la migration

set -e

echo "üîç Migration s√©curis√©e vers docker-compose.traefik.yml"
echo ""

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# V√©rifier que les volumes critiques existent
echo "üì¶ V√©rification des volumes de donn√©es..."
VOLUMES_OK=true

VOLUMES=(
    "makona_postgres_data"
    "makona_media"
    "makona_static"
    "makona_logs"
)

for volume in "${VOLUMES[@]}"; do
    if docker volume inspect "$volume" >/dev/null 2>&1; then
        SIZE=$(docker volume inspect "$volume" --format '{{ .Mountpoint }}' | xargs du -sh 2>/dev/null | cut -f1 || echo "N/A")
        echo -e "${GREEN}‚úÖ${NC} Volume $volume existe (Taille: $SIZE)"
    else
        echo -e "${RED}‚ùå${NC} Volume $volume n'existe pas!"
        VOLUMES_OK=false
    fi
done

echo ""

if [ "$VOLUMES_OK" = false ]; then
    echo -e "${RED}‚ö†Ô∏è  ATTENTION: Certains volumes n'existent pas!${NC}"
    read -p "Voulez-vous continuer malgr√© tout? (oui/non): " -r
    if [[ ! $REPLY =~ ^[oO]ui$ ]]; then
        echo "Migration annul√©e."
        exit 1
    fi
fi

# Sauvegarder l'√©tat actuel des conteneurs
echo "üì∏ √âtat actuel des conteneurs:"
docker-compose -p app ps 2>/dev/null || docker ps --filter "name=makona_" --format "table {{.Names}}\t{{.Status}}"

echo ""
read -p "Appuyez sur Entr√©e pour continuer avec la migration..."

# Arr√™ter proprement les conteneurs existants
echo ""
echo "üõë Arr√™t des conteneurs existants..."
docker-compose -p app down 2>/dev/null || true

# Si docker-compose down ne fonctionne pas, arr√™ter manuellement
for container in makona_backend makona_frontend makona_db; do
    if docker ps -a --format '{{.Names}}' | grep -q "^${container}$"; then
        echo "   Arr√™t de $container..."
        docker stop "$container" 2>/dev/null || true
    fi
done

# V√©rifier √† nouveau les volumes apr√®s l'arr√™t
echo ""
echo "üîç V√©rification finale des volumes (apr√®s arr√™t)..."
for volume in "${VOLUMES[@]}"; do
    if docker volume inspect "$volume" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ${NC} Volume $volume toujours pr√©sent"
    fi
done

# D√©marrer Traefik avec un nom de projet s√©par√©
echo ""
echo "üåê D√©marrage de Traefik..."
docker-compose -f docker-compose.traefik.yml -p traefik up -d

# Attendre un peu pour que Traefik d√©marre
sleep 2

# D√©marrer les services avec docker-compose.yml (qui utilise Traefik)
echo ""
echo "üöÄ D√©marrage des services applicatifs..."
docker-compose -p app up -d

echo ""
echo -e "${GREEN}‚úÖ Migration termin√©e avec succ√®s!${NC}"
echo ""
echo "üìä Statut des services:"
echo "Application:"
docker-compose -p app ps
echo ""
echo "Traefik:"
docker-compose -f docker-compose.traefik.yml -p traefik ps

echo ""
echo "üîç V√©rification finale des volumes:"
for volume in "${VOLUMES[@]}"; do
    if docker volume inspect "$volume" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ${NC} Volume $volume OK"
    else
        echo -e "${RED}‚ùå${NC} Volume $volume MANQUANT!"
    fi
done

echo ""
echo "üìù Pour voir les logs:"
echo "   Application: docker-compose -p app logs -f"
echo "   Traefik: docker-compose -f docker-compose.traefik.yml -p traefik logs -f"
echo ""

